import { assert } from '../../debug/debug';
import { isPresent } from '../../utils/utils';
import { View, ViewType } from './view';
import { ElementRef } from './element';
import { Injector } from '../di/di';
import { ChangeDetector, ChangeDetectorStatus, IterableDifferFactory, IterableDiffer, KeyValueDifferFactory, KeyValueDiffer, KeyValueChangeRecord, CollectionChangeRecord } from '../change_detection/change_detection';
import { triggerLifecycleHook, LifecycleHook } from '../lifecycle/lifecycle_hooks';

export class HostElement {//implements ChangeDetector {

    private _hostView: View = null;
    private _nestedViews: View[] = []; // TODO: Implement embedded views
    private _injector: Injector;

    
    // private _cdStatus: ChangeDetectorStatus = ChangeDetectorStatus.CheckAlways;
    // private _cdDefaultStatus: ChangeDetectorStatus = ChangeDetectorStatus.CheckAlways;
    // private _iterableDiffer: IterableDiffer;
    // private _keyValueDiffer: KeyValueDiffer;
  
    get hostView(): View { return this._hostView; }
    get elementRef(): ElementRef { return new ElementRef(this._hostView.rootElement); }
    get parent() { return this._hostView.parent ? this._hostView.parent.hostElement: undefined; }
    get injector(): Injector { return this._injector }
    // get cdStatus(): ChangeDetectorStatus { return this._cdStatus; }


    constructor(hostView: View, injector: Injector, cdStatus?: ChangeDetectorStatus) {
        this._hostView = hostView;
        // if(typeof cdStatus === 'number') {
        //     this._cdStatus = cdStatus;
        //     this._cdDefaultStatus = cdStatus;
        // }

        // let iterableDifferFactory = new IterableDifferFactory();
        // let keyValueDifferFactory = new KeyValueDifferFactory();

        // if (iterableDifferFactory.supports(this)) {
        //     this._iterableDiffer = iterableDifferFactory.create(this);
        // }

        // if (keyValueDifferFactory.supports(this)) {
        //     this._keyValueDiffer = keyValueDifferFactory.create(this);
        // }
    }

    attachView(view: View, viewIndex: number) {}
    detachView(viewIndex: number) {}

    
    // markForCheck() {}
    
    // detach() {
    //     this._cdStatus = ChangeDetectorStatus.Detached;
    // }
    
    // detectChanges() {
    //     if (this._cdStatus === ChangeDetectorStatus.Checked || this._cdStatus === ChangeDetectorStatus.Errored) {
    //         return;
    //     }
    //     if (this._cdStatus === ChangeDetectorStatus.Destroyed) {
    //         return;
    //     }
    //     // TODO: Implement Iterable differ
    //     // if (isPresent(this._iterableDiffer)) {
    //     //     let changes = this._iterableDiffer.diff(this.component);
    //     //     if (isPresent(changes)) {
    //     //         // TODO
    //     //     }
    //     // }
    //     if (isPresent(this._keyValueDiffer)) {
    //         triggerLifecycleHook(LifecycleHook.OnBeforeCheck, this.directive);
    //         let changes = this._keyValueDiffer.diff(this.directive);
    //         if (isPresent(changes)) {
    //             changes.forEachItem(record => this.emitBinding(record));
    //         }
    //         triggerLifecycleHook(LifecycleHook.OnAfterCheck, this.directive, changes);
    //     }

    //     this.detectChildChanges();
    //     if (this._cdStatus === ChangeDetectorStatus.CheckOnce) this._cdStatus = ChangeDetectorStatus.Checked;
    // }

    // detectChildChanges() {
    //     for (let i = 0, max = this._children.length; i < max; i++) {
    //         let childHost = this._children[i];
    //         if (childHost.cdStatus === ChangeDetectorStatus.Detached) {
    //             continue;
    //         }
    //         childHost.detectChanges();
    //     }
    // }
    
    // checkNoChanges() { }
    
    // reattach() {
    //     this._cdStatus = this._cdDefaultStatus;
    //     this.markForCheck();
    // }
}